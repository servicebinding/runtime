//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	fmtx "fmt"
	osx "os"
	reflectx "reflect"

	cmp "github.com/google/go-cmp/cmp"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	json "k8s.io/apimachinery/pkg/util/json"
	jsonpath "k8s.io/client-go/util/jsonpath"
	metav1 "reconciler.io/dies/apis/meta/v1"
	patch "reconciler.io/dies/patch"
	yaml "sigs.k8s.io/yaml"

	apisv1 "github.com/servicebinding/runtime/apis/v1"
)

var ClusterWorkloadResourceMappingBlank = (&ClusterWorkloadResourceMappingDie{}).DieFeed(apisv1.ClusterWorkloadResourceMapping{})

type ClusterWorkloadResourceMappingDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       apisv1.ClusterWorkloadResourceMapping
	seal    apisv1.ClusterWorkloadResourceMapping
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ClusterWorkloadResourceMappingDie) DieImmutable(immutable bool) *ClusterWorkloadResourceMappingDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ClusterWorkloadResourceMappingDie) DieFeed(r apisv1.ClusterWorkloadResourceMapping) *ClusterWorkloadResourceMappingDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ClusterWorkloadResourceMappingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingDie) DieFeedPtr(r *apisv1.ClusterWorkloadResourceMapping) *ClusterWorkloadResourceMappingDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMapping{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieFeedDuck(v any) *ClusterWorkloadResourceMappingDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieFeedJSON(j []byte) *ClusterWorkloadResourceMappingDie {
	r := apisv1.ClusterWorkloadResourceMapping{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieFeedYAML(y []byte) *ClusterWorkloadResourceMappingDie {
	r := apisv1.ClusterWorkloadResourceMapping{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieFeedYAMLFile(name string) *ClusterWorkloadResourceMappingDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieFeedRawExtension(raw runtime.RawExtension) *ClusterWorkloadResourceMappingDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ClusterWorkloadResourceMappingDie) DieRelease() apisv1.ClusterWorkloadResourceMapping {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ClusterWorkloadResourceMappingDie) DieReleasePtr() *apisv1.ClusterWorkloadResourceMapping {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ClusterWorkloadResourceMappingDie) DieStamp(fn func(r *apisv1.ClusterWorkloadResourceMapping)) *ClusterWorkloadResourceMappingDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ClusterWorkloadResourceMappingDie) DieStampAt(jp string, fn interface{}) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ClusterWorkloadResourceMappingDie) DieWith(fns ...func(d *ClusterWorkloadResourceMappingDie)) *ClusterWorkloadResourceMappingDie {
	nd := ClusterWorkloadResourceMappingBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ClusterWorkloadResourceMappingDie) DeepCopy() *ClusterWorkloadResourceMappingDie {
	r := *d.r.DeepCopy()
	return &ClusterWorkloadResourceMappingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingDie) DieSeal() *ClusterWorkloadResourceMappingDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingDie) DieSealFeed(r apisv1.ClusterWorkloadResourceMapping) *ClusterWorkloadResourceMappingDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingDie) DieSealFeedPtr(r *apisv1.ClusterWorkloadResourceMapping) *ClusterWorkloadResourceMappingDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMapping{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ClusterWorkloadResourceMappingDie) DieSealRelease() apisv1.ClusterWorkloadResourceMapping {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ClusterWorkloadResourceMappingDie) DieSealReleasePtr() *apisv1.ClusterWorkloadResourceMapping {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ClusterWorkloadResourceMappingDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ClusterWorkloadResourceMappingDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ClusterWorkloadResourceMappingDie)(nil)

func (d *ClusterWorkloadResourceMappingDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ClusterWorkloadResourceMappingDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ClusterWorkloadResourceMappingDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ClusterWorkloadResourceMappingDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &apisv1.ClusterWorkloadResourceMapping{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ClusterWorkloadResourceMappingDie) APIVersion(v string) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ClusterWorkloadResourceMappingDie) Kind(v string) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ClusterWorkloadResourceMappingDie) TypeMetadata(v apismetav1.TypeMeta) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ClusterWorkloadResourceMappingDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ClusterWorkloadResourceMappingDie) Metadata(v apismetav1.ObjectMeta) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ClusterWorkloadResourceMappingDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ClusterWorkloadResourceMappingDie) SpecDie(fn func(d *ClusterWorkloadResourceMappingSpecDie)) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		d := ClusterWorkloadResourceMappingSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *ClusterWorkloadResourceMappingDie) Spec(v apisv1.ClusterWorkloadResourceMappingSpec) *ClusterWorkloadResourceMappingDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMapping) {
		r.Spec = v
	})
}

var ClusterWorkloadResourceMappingSpecBlank = (&ClusterWorkloadResourceMappingSpecDie{}).DieFeed(apisv1.ClusterWorkloadResourceMappingSpec{})

type ClusterWorkloadResourceMappingSpecDie struct {
	mutable bool
	r       apisv1.ClusterWorkloadResourceMappingSpec
	seal    apisv1.ClusterWorkloadResourceMappingSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ClusterWorkloadResourceMappingSpecDie) DieImmutable(immutable bool) *ClusterWorkloadResourceMappingSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ClusterWorkloadResourceMappingSpecDie) DieFeed(r apisv1.ClusterWorkloadResourceMappingSpec) *ClusterWorkloadResourceMappingSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ClusterWorkloadResourceMappingSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingSpecDie) DieFeedPtr(r *apisv1.ClusterWorkloadResourceMappingSpec) *ClusterWorkloadResourceMappingSpecDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMappingSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieFeedDuck(v any) *ClusterWorkloadResourceMappingSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieFeedJSON(j []byte) *ClusterWorkloadResourceMappingSpecDie {
	r := apisv1.ClusterWorkloadResourceMappingSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieFeedYAML(y []byte) *ClusterWorkloadResourceMappingSpecDie {
	r := apisv1.ClusterWorkloadResourceMappingSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieFeedYAMLFile(name string) *ClusterWorkloadResourceMappingSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ClusterWorkloadResourceMappingSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ClusterWorkloadResourceMappingSpecDie) DieRelease() apisv1.ClusterWorkloadResourceMappingSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ClusterWorkloadResourceMappingSpecDie) DieReleasePtr() *apisv1.ClusterWorkloadResourceMappingSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ClusterWorkloadResourceMappingSpecDie) DieStamp(fn func(r *apisv1.ClusterWorkloadResourceMappingSpec)) *ClusterWorkloadResourceMappingSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ClusterWorkloadResourceMappingSpecDie) DieStampAt(jp string, fn interface{}) *ClusterWorkloadResourceMappingSpecDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ClusterWorkloadResourceMappingSpecDie) DieWith(fns ...func(d *ClusterWorkloadResourceMappingSpecDie)) *ClusterWorkloadResourceMappingSpecDie {
	nd := ClusterWorkloadResourceMappingSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ClusterWorkloadResourceMappingSpecDie) DeepCopy() *ClusterWorkloadResourceMappingSpecDie {
	r := *d.r.DeepCopy()
	return &ClusterWorkloadResourceMappingSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingSpecDie) DieSeal() *ClusterWorkloadResourceMappingSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingSpecDie) DieSealFeed(r apisv1.ClusterWorkloadResourceMappingSpec) *ClusterWorkloadResourceMappingSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingSpecDie) DieSealFeedPtr(r *apisv1.ClusterWorkloadResourceMappingSpec) *ClusterWorkloadResourceMappingSpecDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMappingSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ClusterWorkloadResourceMappingSpecDie) DieSealRelease() apisv1.ClusterWorkloadResourceMappingSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ClusterWorkloadResourceMappingSpecDie) DieSealReleasePtr() *apisv1.ClusterWorkloadResourceMappingSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ClusterWorkloadResourceMappingSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ClusterWorkloadResourceMappingSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// VersionDie mutates a single item in Versions matched by the nested field Version, appending a new item if no match is found.
//
// Versions is the collection of versions for a given resource, with mappings.
func (d *ClusterWorkloadResourceMappingSpecDie) VersionDie(v string, fn func(d *ClusterWorkloadResourceMappingTemplateDie)) *ClusterWorkloadResourceMappingSpecDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingSpec) {
		for i := range r.Versions {
			if v == r.Versions[i].Version {
				d := ClusterWorkloadResourceMappingTemplateBlank.DieImmutable(false).DieFeed(r.Versions[i])
				fn(d)
				r.Versions[i] = d.DieRelease()
				return
			}
		}

		d := ClusterWorkloadResourceMappingTemplateBlank.DieImmutable(false).DieFeed(apisv1.ClusterWorkloadResourceMappingTemplate{Version: v})
		fn(d)
		r.Versions = append(r.Versions, d.DieRelease())
	})
}

// Versions is the collection of versions for a given resource, with mappings.
func (d *ClusterWorkloadResourceMappingSpecDie) Versions(v ...apisv1.ClusterWorkloadResourceMappingTemplate) *ClusterWorkloadResourceMappingSpecDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingSpec) {
		r.Versions = v
	})
}

var ClusterWorkloadResourceMappingTemplateBlank = (&ClusterWorkloadResourceMappingTemplateDie{}).DieFeed(apisv1.ClusterWorkloadResourceMappingTemplate{})

type ClusterWorkloadResourceMappingTemplateDie struct {
	mutable bool
	r       apisv1.ClusterWorkloadResourceMappingTemplate
	seal    apisv1.ClusterWorkloadResourceMappingTemplate
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ClusterWorkloadResourceMappingTemplateDie) DieImmutable(immutable bool) *ClusterWorkloadResourceMappingTemplateDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieFeed(r apisv1.ClusterWorkloadResourceMappingTemplate) *ClusterWorkloadResourceMappingTemplateDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ClusterWorkloadResourceMappingTemplateDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieFeedPtr(r *apisv1.ClusterWorkloadResourceMappingTemplate) *ClusterWorkloadResourceMappingTemplateDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMappingTemplate{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieFeedDuck(v any) *ClusterWorkloadResourceMappingTemplateDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieFeedJSON(j []byte) *ClusterWorkloadResourceMappingTemplateDie {
	r := apisv1.ClusterWorkloadResourceMappingTemplate{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieFeedYAML(y []byte) *ClusterWorkloadResourceMappingTemplateDie {
	r := apisv1.ClusterWorkloadResourceMappingTemplate{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieFeedYAMLFile(name string) *ClusterWorkloadResourceMappingTemplateDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieFeedRawExtension(raw runtime.RawExtension) *ClusterWorkloadResourceMappingTemplateDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieRelease() apisv1.ClusterWorkloadResourceMappingTemplate {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieReleasePtr() *apisv1.ClusterWorkloadResourceMappingTemplate {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieStamp(fn func(r *apisv1.ClusterWorkloadResourceMappingTemplate)) *ClusterWorkloadResourceMappingTemplateDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieStampAt(jp string, fn interface{}) *ClusterWorkloadResourceMappingTemplateDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingTemplate) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieWith(fns ...func(d *ClusterWorkloadResourceMappingTemplateDie)) *ClusterWorkloadResourceMappingTemplateDie {
	nd := ClusterWorkloadResourceMappingTemplateBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ClusterWorkloadResourceMappingTemplateDie) DeepCopy() *ClusterWorkloadResourceMappingTemplateDie {
	r := *d.r.DeepCopy()
	return &ClusterWorkloadResourceMappingTemplateDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieSeal() *ClusterWorkloadResourceMappingTemplateDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieSealFeed(r apisv1.ClusterWorkloadResourceMappingTemplate) *ClusterWorkloadResourceMappingTemplateDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieSealFeedPtr(r *apisv1.ClusterWorkloadResourceMappingTemplate) *ClusterWorkloadResourceMappingTemplateDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMappingTemplate{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieSealRelease() apisv1.ClusterWorkloadResourceMappingTemplate {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieSealReleasePtr() *apisv1.ClusterWorkloadResourceMappingTemplate {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ClusterWorkloadResourceMappingTemplateDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ClusterWorkloadResourceMappingTemplateDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ContainersDie replaces Containers by collecting the released value from each die passed.
//
// Containers is the collection of mappings to container-like fragments of the workload resource. Defaults to
//
// mappings appropriate for a PodSpecable resource.
func (d *ClusterWorkloadResourceMappingTemplateDie) ContainersDie(v ...*ClusterWorkloadResourceMappingContainerDie) *ClusterWorkloadResourceMappingTemplateDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingTemplate) {
		r.Containers = make([]apisv1.ClusterWorkloadResourceMappingContainer, len(v))
		for i := range v {
			r.Containers[i] = v[i].DieRelease()
		}
	})
}

// Version is the version of the workload resource that this mapping is for.
func (d *ClusterWorkloadResourceMappingTemplateDie) Version(v string) *ClusterWorkloadResourceMappingTemplateDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingTemplate) {
		r.Version = v
	})
}

// Annotations is a Restricted JSONPath that references the annotations map within the workload resource. These
//
// annotations must end up in the resulting Pod, and are generally not the workload resource's annotations.
//
// Defaults to `.spec.template.metadata.annotations`.
func (d *ClusterWorkloadResourceMappingTemplateDie) Annotations(v string) *ClusterWorkloadResourceMappingTemplateDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingTemplate) {
		r.Annotations = v
	})
}

// Containers is the collection of mappings to container-like fragments of the workload resource. Defaults to
//
// mappings appropriate for a PodSpecable resource.
func (d *ClusterWorkloadResourceMappingTemplateDie) Containers(v ...apisv1.ClusterWorkloadResourceMappingContainer) *ClusterWorkloadResourceMappingTemplateDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingTemplate) {
		r.Containers = v
	})
}

// Volumes is a Restricted JSONPath that references the slice of volumes within the workload resource. Defaults to
//
// `.spec.template.spec.volumes`.
func (d *ClusterWorkloadResourceMappingTemplateDie) Volumes(v string) *ClusterWorkloadResourceMappingTemplateDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingTemplate) {
		r.Volumes = v
	})
}

var ClusterWorkloadResourceMappingContainerBlank = (&ClusterWorkloadResourceMappingContainerDie{}).DieFeed(apisv1.ClusterWorkloadResourceMappingContainer{})

type ClusterWorkloadResourceMappingContainerDie struct {
	mutable bool
	r       apisv1.ClusterWorkloadResourceMappingContainer
	seal    apisv1.ClusterWorkloadResourceMappingContainer
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ClusterWorkloadResourceMappingContainerDie) DieImmutable(immutable bool) *ClusterWorkloadResourceMappingContainerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ClusterWorkloadResourceMappingContainerDie) DieFeed(r apisv1.ClusterWorkloadResourceMappingContainer) *ClusterWorkloadResourceMappingContainerDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ClusterWorkloadResourceMappingContainerDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingContainerDie) DieFeedPtr(r *apisv1.ClusterWorkloadResourceMappingContainer) *ClusterWorkloadResourceMappingContainerDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMappingContainer{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieFeedDuck(v any) *ClusterWorkloadResourceMappingContainerDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieFeedJSON(j []byte) *ClusterWorkloadResourceMappingContainerDie {
	r := apisv1.ClusterWorkloadResourceMappingContainer{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieFeedYAML(y []byte) *ClusterWorkloadResourceMappingContainerDie {
	r := apisv1.ClusterWorkloadResourceMappingContainer{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieFeedYAMLFile(name string) *ClusterWorkloadResourceMappingContainerDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieFeedRawExtension(raw runtime.RawExtension) *ClusterWorkloadResourceMappingContainerDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ClusterWorkloadResourceMappingContainerDie) DieRelease() apisv1.ClusterWorkloadResourceMappingContainer {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ClusterWorkloadResourceMappingContainerDie) DieReleasePtr() *apisv1.ClusterWorkloadResourceMappingContainer {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ClusterWorkloadResourceMappingContainerDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ClusterWorkloadResourceMappingContainerDie) DieStamp(fn func(r *apisv1.ClusterWorkloadResourceMappingContainer)) *ClusterWorkloadResourceMappingContainerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ClusterWorkloadResourceMappingContainerDie) DieStampAt(jp string, fn interface{}) *ClusterWorkloadResourceMappingContainerDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingContainer) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ClusterWorkloadResourceMappingContainerDie) DieWith(fns ...func(d *ClusterWorkloadResourceMappingContainerDie)) *ClusterWorkloadResourceMappingContainerDie {
	nd := ClusterWorkloadResourceMappingContainerBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ClusterWorkloadResourceMappingContainerDie) DeepCopy() *ClusterWorkloadResourceMappingContainerDie {
	r := *d.r.DeepCopy()
	return &ClusterWorkloadResourceMappingContainerDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingContainerDie) DieSeal() *ClusterWorkloadResourceMappingContainerDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ClusterWorkloadResourceMappingContainerDie) DieSealFeed(r apisv1.ClusterWorkloadResourceMappingContainer) *ClusterWorkloadResourceMappingContainerDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ClusterWorkloadResourceMappingContainerDie) DieSealFeedPtr(r *apisv1.ClusterWorkloadResourceMappingContainer) *ClusterWorkloadResourceMappingContainerDie {
	if r == nil {
		r = &apisv1.ClusterWorkloadResourceMappingContainer{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ClusterWorkloadResourceMappingContainerDie) DieSealRelease() apisv1.ClusterWorkloadResourceMappingContainer {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ClusterWorkloadResourceMappingContainerDie) DieSealReleasePtr() *apisv1.ClusterWorkloadResourceMappingContainer {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ClusterWorkloadResourceMappingContainerDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ClusterWorkloadResourceMappingContainerDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Path is the JSONPath within the workload resource that matches an existing fragment that is container-like.
func (d *ClusterWorkloadResourceMappingContainerDie) Path(v string) *ClusterWorkloadResourceMappingContainerDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingContainer) {
		r.Path = v
	})
}

// Name is a Restricted JSONPath that references the name of the container with the container-like workload resource
//
// fragment. If not defined, container name filtering is ignored.
func (d *ClusterWorkloadResourceMappingContainerDie) Name(v string) *ClusterWorkloadResourceMappingContainerDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingContainer) {
		r.Name = v
	})
}

// Env is a Restricted JSONPath that references the slice of environment variables for the container with the
//
// container-like workload resource fragment. The referenced location is created if it does not exist. Defaults
//
// to `.envs`.
func (d *ClusterWorkloadResourceMappingContainerDie) Env(v string) *ClusterWorkloadResourceMappingContainerDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingContainer) {
		r.Env = v
	})
}

// VolumeMounts is a Restricted JSONPath that references the slice of volume mounts for the container with the
//
// container-like workload resource fragment. The referenced location is created if it does not exist. Defaults
//
// to `.volumeMounts`.
func (d *ClusterWorkloadResourceMappingContainerDie) VolumeMounts(v string) *ClusterWorkloadResourceMappingContainerDie {
	return d.DieStamp(func(r *apisv1.ClusterWorkloadResourceMappingContainer) {
		r.VolumeMounts = v
	})
}

var ServiceBindingBlank = (&ServiceBindingDie{}).DieFeed(apisv1.ServiceBinding{})

type ServiceBindingDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       apisv1.ServiceBinding
	seal    apisv1.ServiceBinding
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingDie) DieImmutable(immutable bool) *ServiceBindingDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingDie) DieFeed(r apisv1.ServiceBinding) *ServiceBindingDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceBindingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingDie) DieFeedPtr(r *apisv1.ServiceBinding) *ServiceBindingDie {
	if r == nil {
		r = &apisv1.ServiceBinding{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingDie) DieFeedDuck(v any) *ServiceBindingDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingDie) DieFeedJSON(j []byte) *ServiceBindingDie {
	r := apisv1.ServiceBinding{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingDie) DieFeedYAML(y []byte) *ServiceBindingDie {
	r := apisv1.ServiceBinding{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingDie) DieFeedYAMLFile(name string) *ServiceBindingDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingDie) DieRelease() apisv1.ServiceBinding {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingDie) DieReleasePtr() *apisv1.ServiceBinding {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *ServiceBindingDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingDie) DieStamp(fn func(r *apisv1.ServiceBinding)) *ServiceBindingDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingDie) DieStampAt(jp string, fn interface{}) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingDie) DieWith(fns ...func(d *ServiceBindingDie)) *ServiceBindingDie {
	nd := ServiceBindingBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingDie) DeepCopy() *ServiceBindingDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingDie) DieSeal() *ServiceBindingDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingDie) DieSealFeed(r apisv1.ServiceBinding) *ServiceBindingDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingDie) DieSealFeedPtr(r *apisv1.ServiceBinding) *ServiceBindingDie {
	if r == nil {
		r = &apisv1.ServiceBinding{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingDie) DieSealRelease() apisv1.ServiceBinding {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingDie) DieSealReleasePtr() *apisv1.ServiceBinding {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*ServiceBindingDie)(nil)

func (d *ServiceBindingDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ServiceBindingDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceBindingDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceBindingDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &apisv1.ServiceBinding{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ServiceBindingDie) APIVersion(v string) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceBindingDie) Kind(v string) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *ServiceBindingDie) TypeMetadata(v apismetav1.TypeMeta) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *ServiceBindingDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *ServiceBindingDie) Metadata(v apismetav1.ObjectMeta) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ServiceBindingDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ServiceBindingDie) SpecDie(fn func(d *ServiceBindingSpecDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		d := ServiceBindingSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ServiceBindingDie) StatusDie(fn func(d *ServiceBindingStatusDie)) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		d := ServiceBindingStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ServiceBindingDie) Spec(v apisv1.ServiceBindingSpec) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		r.Spec = v
	})
}

func (d *ServiceBindingDie) Status(v apisv1.ServiceBindingStatus) *ServiceBindingDie {
	return d.DieStamp(func(r *apisv1.ServiceBinding) {
		r.Status = v
	})
}

var ServiceBindingSpecBlank = (&ServiceBindingSpecDie{}).DieFeed(apisv1.ServiceBindingSpec{})

type ServiceBindingSpecDie struct {
	mutable bool
	r       apisv1.ServiceBindingSpec
	seal    apisv1.ServiceBindingSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingSpecDie) DieImmutable(immutable bool) *ServiceBindingSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingSpecDie) DieFeed(r apisv1.ServiceBindingSpec) *ServiceBindingSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBindingSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingSpecDie) DieFeedPtr(r *apisv1.ServiceBindingSpec) *ServiceBindingSpecDie {
	if r == nil {
		r = &apisv1.ServiceBindingSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedDuck(v any) *ServiceBindingSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedJSON(j []byte) *ServiceBindingSpecDie {
	r := apisv1.ServiceBindingSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedYAML(y []byte) *ServiceBindingSpecDie {
	r := apisv1.ServiceBindingSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedYAMLFile(name string) *ServiceBindingSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingSpecDie) DieRelease() apisv1.ServiceBindingSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingSpecDie) DieReleasePtr() *apisv1.ServiceBindingSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingSpecDie) DieStamp(fn func(r *apisv1.ServiceBindingSpec)) *ServiceBindingSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingSpecDie) DieStampAt(jp string, fn interface{}) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingSpecDie) DieWith(fns ...func(d *ServiceBindingSpecDie)) *ServiceBindingSpecDie {
	nd := ServiceBindingSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingSpecDie) DeepCopy() *ServiceBindingSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingSpecDie) DieSeal() *ServiceBindingSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingSpecDie) DieSealFeed(r apisv1.ServiceBindingSpec) *ServiceBindingSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingSpecDie) DieSealFeedPtr(r *apisv1.ServiceBindingSpec) *ServiceBindingSpecDie {
	if r == nil {
		r = &apisv1.ServiceBindingSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingSpecDie) DieSealRelease() apisv1.ServiceBindingSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingSpecDie) DieSealReleasePtr() *apisv1.ServiceBindingSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// WorkloadDie mutates Workload as a die.
//
// Workload is a reference to an object
func (d *ServiceBindingSpecDie) WorkloadDie(fn func(d *ServiceBindingWorkloadReferenceDie)) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		d := ServiceBindingWorkloadReferenceBlank.DieImmutable(false).DieFeed(r.Workload)
		fn(d)
		r.Workload = d.DieRelease()
	})
}

// ServiceDie mutates Service as a die.
//
// Service is a reference to an object that fulfills the ProvisionedService duck type
func (d *ServiceBindingSpecDie) ServiceDie(fn func(d *ServiceBindingServiceReferenceDie)) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		d := ServiceBindingServiceReferenceBlank.DieImmutable(false).DieFeed(r.Service)
		fn(d)
		r.Service = d.DieRelease()
	})
}

// EnvDie mutates a single item in Env matched by the nested field Name, appending a new item if no match is found.
//
// Env is the collection of mappings from Secret entries to environment variables
func (d *ServiceBindingSpecDie) EnvDie(v string, fn func(d *EnvMappingDie)) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		for i := range r.Env {
			if v == r.Env[i].Name {
				d := EnvMappingBlank.DieImmutable(false).DieFeed(r.Env[i])
				fn(d)
				r.Env[i] = d.DieRelease()
				return
			}
		}

		d := EnvMappingBlank.DieImmutable(false).DieFeed(apisv1.EnvMapping{Name: v})
		fn(d)
		r.Env = append(r.Env, d.DieRelease())
	})
}

// Name is the name of the service as projected into the workload container.  Defaults to .metadata.name.
func (d *ServiceBindingSpecDie) Name(v string) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		r.Name = v
	})
}

// Type is the type of the service as projected into the workload container
func (d *ServiceBindingSpecDie) Type(v string) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		r.Type = v
	})
}

// Provider is the provider of the service as projected into the workload container
func (d *ServiceBindingSpecDie) Provider(v string) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		r.Provider = v
	})
}

// Workload is a reference to an object
func (d *ServiceBindingSpecDie) Workload(v apisv1.ServiceBindingWorkloadReference) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		r.Workload = v
	})
}

// Service is a reference to an object that fulfills the ProvisionedService duck type
func (d *ServiceBindingSpecDie) Service(v apisv1.ServiceBindingServiceReference) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		r.Service = v
	})
}

// Env is the collection of mappings from Secret entries to environment variables
func (d *ServiceBindingSpecDie) Env(v ...apisv1.EnvMapping) *ServiceBindingSpecDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSpec) {
		r.Env = v
	})
}

var ServiceBindingWorkloadReferenceBlank = (&ServiceBindingWorkloadReferenceDie{}).DieFeed(apisv1.ServiceBindingWorkloadReference{})

type ServiceBindingWorkloadReferenceDie struct {
	mutable bool
	r       apisv1.ServiceBindingWorkloadReference
	seal    apisv1.ServiceBindingWorkloadReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingWorkloadReferenceDie) DieImmutable(immutable bool) *ServiceBindingWorkloadReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingWorkloadReferenceDie) DieFeed(r apisv1.ServiceBindingWorkloadReference) *ServiceBindingWorkloadReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBindingWorkloadReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingWorkloadReferenceDie) DieFeedPtr(r *apisv1.ServiceBindingWorkloadReference) *ServiceBindingWorkloadReferenceDie {
	if r == nil {
		r = &apisv1.ServiceBindingWorkloadReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieFeedDuck(v any) *ServiceBindingWorkloadReferenceDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieFeedJSON(j []byte) *ServiceBindingWorkloadReferenceDie {
	r := apisv1.ServiceBindingWorkloadReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieFeedYAML(y []byte) *ServiceBindingWorkloadReferenceDie {
	r := apisv1.ServiceBindingWorkloadReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieFeedYAMLFile(name string) *ServiceBindingWorkloadReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingWorkloadReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingWorkloadReferenceDie) DieRelease() apisv1.ServiceBindingWorkloadReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingWorkloadReferenceDie) DieReleasePtr() *apisv1.ServiceBindingWorkloadReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingWorkloadReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingWorkloadReferenceDie) DieStamp(fn func(r *apisv1.ServiceBindingWorkloadReference)) *ServiceBindingWorkloadReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingWorkloadReferenceDie) DieStampAt(jp string, fn interface{}) *ServiceBindingWorkloadReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingWorkloadReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingWorkloadReferenceDie) DieWith(fns ...func(d *ServiceBindingWorkloadReferenceDie)) *ServiceBindingWorkloadReferenceDie {
	nd := ServiceBindingWorkloadReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingWorkloadReferenceDie) DeepCopy() *ServiceBindingWorkloadReferenceDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingWorkloadReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingWorkloadReferenceDie) DieSeal() *ServiceBindingWorkloadReferenceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingWorkloadReferenceDie) DieSealFeed(r apisv1.ServiceBindingWorkloadReference) *ServiceBindingWorkloadReferenceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingWorkloadReferenceDie) DieSealFeedPtr(r *apisv1.ServiceBindingWorkloadReference) *ServiceBindingWorkloadReferenceDie {
	if r == nil {
		r = &apisv1.ServiceBindingWorkloadReference{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingWorkloadReferenceDie) DieSealRelease() apisv1.ServiceBindingWorkloadReference {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingWorkloadReferenceDie) DieSealReleasePtr() *apisv1.ServiceBindingWorkloadReference {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingWorkloadReferenceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingWorkloadReferenceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// SelectorDie mutates Selector as a die.
//
// Selector is a query that selects the workload or workloads to bind the service to
func (d *ServiceBindingWorkloadReferenceDie) SelectorDie(fn func(d *metav1.LabelSelectorDie)) *ServiceBindingWorkloadReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingWorkloadReference) {
		d := metav1.LabelSelectorBlank.DieImmutable(false).DieFeedPtr(r.Selector)
		fn(d)
		r.Selector = d.DieReleasePtr()
	})
}

// API version of the referent.
func (d *ServiceBindingWorkloadReferenceDie) APIVersion(v string) *ServiceBindingWorkloadReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingWorkloadReference) {
		r.APIVersion = v
	})
}

// Kind of the referent.
//
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceBindingWorkloadReferenceDie) Kind(v string) *ServiceBindingWorkloadReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingWorkloadReference) {
		r.Kind = v
	})
}

// Name of the referent.
//
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (d *ServiceBindingWorkloadReferenceDie) Name(v string) *ServiceBindingWorkloadReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingWorkloadReference) {
		r.Name = v
	})
}

// Selector is a query that selects the workload or workloads to bind the service to
func (d *ServiceBindingWorkloadReferenceDie) Selector(v *apismetav1.LabelSelector) *ServiceBindingWorkloadReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingWorkloadReference) {
		r.Selector = v
	})
}

// Containers describes which containers in a Pod should be bound to
func (d *ServiceBindingWorkloadReferenceDie) Containers(v ...string) *ServiceBindingWorkloadReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingWorkloadReference) {
		r.Containers = v
	})
}

var ServiceBindingServiceReferenceBlank = (&ServiceBindingServiceReferenceDie{}).DieFeed(apisv1.ServiceBindingServiceReference{})

type ServiceBindingServiceReferenceDie struct {
	mutable bool
	r       apisv1.ServiceBindingServiceReference
	seal    apisv1.ServiceBindingServiceReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingServiceReferenceDie) DieImmutable(immutable bool) *ServiceBindingServiceReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingServiceReferenceDie) DieFeed(r apisv1.ServiceBindingServiceReference) *ServiceBindingServiceReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBindingServiceReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingServiceReferenceDie) DieFeedPtr(r *apisv1.ServiceBindingServiceReference) *ServiceBindingServiceReferenceDie {
	if r == nil {
		r = &apisv1.ServiceBindingServiceReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieFeedDuck(v any) *ServiceBindingServiceReferenceDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieFeedJSON(j []byte) *ServiceBindingServiceReferenceDie {
	r := apisv1.ServiceBindingServiceReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieFeedYAML(y []byte) *ServiceBindingServiceReferenceDie {
	r := apisv1.ServiceBindingServiceReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieFeedYAMLFile(name string) *ServiceBindingServiceReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingServiceReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingServiceReferenceDie) DieRelease() apisv1.ServiceBindingServiceReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingServiceReferenceDie) DieReleasePtr() *apisv1.ServiceBindingServiceReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingServiceReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingServiceReferenceDie) DieStamp(fn func(r *apisv1.ServiceBindingServiceReference)) *ServiceBindingServiceReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingServiceReferenceDie) DieStampAt(jp string, fn interface{}) *ServiceBindingServiceReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingServiceReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingServiceReferenceDie) DieWith(fns ...func(d *ServiceBindingServiceReferenceDie)) *ServiceBindingServiceReferenceDie {
	nd := ServiceBindingServiceReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingServiceReferenceDie) DeepCopy() *ServiceBindingServiceReferenceDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingServiceReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingServiceReferenceDie) DieSeal() *ServiceBindingServiceReferenceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingServiceReferenceDie) DieSealFeed(r apisv1.ServiceBindingServiceReference) *ServiceBindingServiceReferenceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingServiceReferenceDie) DieSealFeedPtr(r *apisv1.ServiceBindingServiceReference) *ServiceBindingServiceReferenceDie {
	if r == nil {
		r = &apisv1.ServiceBindingServiceReference{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingServiceReferenceDie) DieSealRelease() apisv1.ServiceBindingServiceReference {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingServiceReferenceDie) DieSealReleasePtr() *apisv1.ServiceBindingServiceReference {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingServiceReferenceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingServiceReferenceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// API version of the referent.
func (d *ServiceBindingServiceReferenceDie) APIVersion(v string) *ServiceBindingServiceReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingServiceReference) {
		r.APIVersion = v
	})
}

// Kind of the referent.
//
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ServiceBindingServiceReferenceDie) Kind(v string) *ServiceBindingServiceReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingServiceReference) {
		r.Kind = v
	})
}

// Name of the referent.
//
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (d *ServiceBindingServiceReferenceDie) Name(v string) *ServiceBindingServiceReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingServiceReference) {
		r.Name = v
	})
}

var EnvMappingBlank = (&EnvMappingDie{}).DieFeed(apisv1.EnvMapping{})

type EnvMappingDie struct {
	mutable bool
	r       apisv1.EnvMapping
	seal    apisv1.EnvMapping
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *EnvMappingDie) DieImmutable(immutable bool) *EnvMappingDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *EnvMappingDie) DieFeed(r apisv1.EnvMapping) *EnvMappingDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &EnvMappingDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *EnvMappingDie) DieFeedPtr(r *apisv1.EnvMapping) *EnvMappingDie {
	if r == nil {
		r = &apisv1.EnvMapping{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *EnvMappingDie) DieFeedDuck(v any) *EnvMappingDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *EnvMappingDie) DieFeedJSON(j []byte) *EnvMappingDie {
	r := apisv1.EnvMapping{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *EnvMappingDie) DieFeedYAML(y []byte) *EnvMappingDie {
	r := apisv1.EnvMapping{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *EnvMappingDie) DieFeedYAMLFile(name string) *EnvMappingDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *EnvMappingDie) DieFeedRawExtension(raw runtime.RawExtension) *EnvMappingDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *EnvMappingDie) DieRelease() apisv1.EnvMapping {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *EnvMappingDie) DieReleasePtr() *apisv1.EnvMapping {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *EnvMappingDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *EnvMappingDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *EnvMappingDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *EnvMappingDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *EnvMappingDie) DieStamp(fn func(r *apisv1.EnvMapping)) *EnvMappingDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *EnvMappingDie) DieStampAt(jp string, fn interface{}) *EnvMappingDie {
	return d.DieStamp(func(r *apisv1.EnvMapping) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *EnvMappingDie) DieWith(fns ...func(d *EnvMappingDie)) *EnvMappingDie {
	nd := EnvMappingBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *EnvMappingDie) DeepCopy() *EnvMappingDie {
	r := *d.r.DeepCopy()
	return &EnvMappingDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *EnvMappingDie) DieSeal() *EnvMappingDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *EnvMappingDie) DieSealFeed(r apisv1.EnvMapping) *EnvMappingDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *EnvMappingDie) DieSealFeedPtr(r *apisv1.EnvMapping) *EnvMappingDie {
	if r == nil {
		r = &apisv1.EnvMapping{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *EnvMappingDie) DieSealRelease() apisv1.EnvMapping {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *EnvMappingDie) DieSealReleasePtr() *apisv1.EnvMapping {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *EnvMappingDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *EnvMappingDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Name is the name of the environment variable
func (d *EnvMappingDie) Name(v string) *EnvMappingDie {
	return d.DieStamp(func(r *apisv1.EnvMapping) {
		r.Name = v
	})
}

// Key is the key in the Secret that will be exposed
func (d *EnvMappingDie) Key(v string) *EnvMappingDie {
	return d.DieStamp(func(r *apisv1.EnvMapping) {
		r.Key = v
	})
}

var ServiceBindingStatusBlank = (&ServiceBindingStatusDie{}).DieFeed(apisv1.ServiceBindingStatus{})

type ServiceBindingStatusDie struct {
	mutable bool
	r       apisv1.ServiceBindingStatus
	seal    apisv1.ServiceBindingStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingStatusDie) DieImmutable(immutable bool) *ServiceBindingStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingStatusDie) DieFeed(r apisv1.ServiceBindingStatus) *ServiceBindingStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBindingStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingStatusDie) DieFeedPtr(r *apisv1.ServiceBindingStatus) *ServiceBindingStatusDie {
	if r == nil {
		r = &apisv1.ServiceBindingStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedDuck(v any) *ServiceBindingStatusDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedJSON(j []byte) *ServiceBindingStatusDie {
	r := apisv1.ServiceBindingStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedYAML(y []byte) *ServiceBindingStatusDie {
	r := apisv1.ServiceBindingStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedYAMLFile(name string) *ServiceBindingStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingStatusDie) DieRelease() apisv1.ServiceBindingStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingStatusDie) DieReleasePtr() *apisv1.ServiceBindingStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingStatusDie) DieStamp(fn func(r *apisv1.ServiceBindingStatus)) *ServiceBindingStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingStatusDie) DieStampAt(jp string, fn interface{}) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingStatusDie) DieWith(fns ...func(d *ServiceBindingStatusDie)) *ServiceBindingStatusDie {
	nd := ServiceBindingStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingStatusDie) DeepCopy() *ServiceBindingStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingStatusDie) DieSeal() *ServiceBindingStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingStatusDie) DieSealFeed(r apisv1.ServiceBindingStatus) *ServiceBindingStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingStatusDie) DieSealFeedPtr(r *apisv1.ServiceBindingStatus) *ServiceBindingStatusDie {
	if r == nil {
		r = &apisv1.ServiceBindingStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingStatusDie) DieSealRelease() apisv1.ServiceBindingStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingStatusDie) DieSealReleasePtr() *apisv1.ServiceBindingStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ConditionsDie replaces Conditions by collecting the released value from each die passed.
//
// Conditions are the conditions of this ServiceBinding
func (d *ServiceBindingStatusDie) ConditionsDie(v ...*metav1.ConditionDie) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingStatus) {
		r.Conditions = make([]apismetav1.Condition, len(v))
		for i := range v {
			r.Conditions[i] = v[i].DieRelease()
		}
	})
}

// BindingDie mutates Binding as a die.
//
// Binding exposes the projected secret for this ServiceBinding
func (d *ServiceBindingStatusDie) BindingDie(fn func(d *ServiceBindingSecretReferenceDie)) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingStatus) {
		d := ServiceBindingSecretReferenceBlank.DieImmutable(false).DieFeedPtr(r.Binding)
		fn(d)
		r.Binding = d.DieReleasePtr()
	})
}

// ObservedGeneration is the 'Generation' of the ServiceBinding that
//
// was last processed by the controller.
func (d *ServiceBindingStatusDie) ObservedGeneration(v int64) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingStatus) {
		r.ObservedGeneration = v
	})
}

// Conditions are the conditions of this ServiceBinding
func (d *ServiceBindingStatusDie) Conditions(v ...apismetav1.Condition) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingStatus) {
		r.Conditions = v
	})
}

// Binding exposes the projected secret for this ServiceBinding
func (d *ServiceBindingStatusDie) Binding(v *apisv1.ServiceBindingSecretReference) *ServiceBindingStatusDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingStatus) {
		r.Binding = v
	})
}

var ServiceBindingSecretReferenceBlank = (&ServiceBindingSecretReferenceDie{}).DieFeed(apisv1.ServiceBindingSecretReference{})

type ServiceBindingSecretReferenceDie struct {
	mutable bool
	r       apisv1.ServiceBindingSecretReference
	seal    apisv1.ServiceBindingSecretReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBindingSecretReferenceDie) DieImmutable(immutable bool) *ServiceBindingSecretReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBindingSecretReferenceDie) DieFeed(r apisv1.ServiceBindingSecretReference) *ServiceBindingSecretReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBindingSecretReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingSecretReferenceDie) DieFeedPtr(r *apisv1.ServiceBindingSecretReference) *ServiceBindingSecretReferenceDie {
	if r == nil {
		r = &apisv1.ServiceBindingSecretReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieFeedDuck(v any) *ServiceBindingSecretReferenceDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieFeedJSON(j []byte) *ServiceBindingSecretReferenceDie {
	r := apisv1.ServiceBindingSecretReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieFeedYAML(y []byte) *ServiceBindingSecretReferenceDie {
	r := apisv1.ServiceBindingSecretReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieFeedYAMLFile(name string) *ServiceBindingSecretReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBindingSecretReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBindingSecretReferenceDie) DieRelease() apisv1.ServiceBindingSecretReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBindingSecretReferenceDie) DieReleasePtr() *apisv1.ServiceBindingSecretReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBindingSecretReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBindingSecretReferenceDie) DieStamp(fn func(r *apisv1.ServiceBindingSecretReference)) *ServiceBindingSecretReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceBindingSecretReferenceDie) DieStampAt(jp string, fn interface{}) *ServiceBindingSecretReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSecretReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceBindingSecretReferenceDie) DieWith(fns ...func(d *ServiceBindingSecretReferenceDie)) *ServiceBindingSecretReferenceDie {
	nd := ServiceBindingSecretReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBindingSecretReferenceDie) DeepCopy() *ServiceBindingSecretReferenceDie {
	r := *d.r.DeepCopy()
	return &ServiceBindingSecretReferenceDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ServiceBindingSecretReferenceDie) DieSeal() *ServiceBindingSecretReferenceDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ServiceBindingSecretReferenceDie) DieSealFeed(r apisv1.ServiceBindingSecretReference) *ServiceBindingSecretReferenceDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ServiceBindingSecretReferenceDie) DieSealFeedPtr(r *apisv1.ServiceBindingSecretReference) *ServiceBindingSecretReferenceDie {
	if r == nil {
		r = &apisv1.ServiceBindingSecretReference{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ServiceBindingSecretReferenceDie) DieSealRelease() apisv1.ServiceBindingSecretReference {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ServiceBindingSecretReferenceDie) DieSealReleasePtr() *apisv1.ServiceBindingSecretReference {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ServiceBindingSecretReferenceDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ServiceBindingSecretReferenceDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Name of the referent secret.
//
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (d *ServiceBindingSecretReferenceDie) Name(v string) *ServiceBindingSecretReferenceDie {
	return d.DieStamp(func(r *apisv1.ServiceBindingSecretReference) {
		r.Name = v
	})
}
